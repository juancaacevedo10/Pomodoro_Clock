{"version":3,"sources":["components/setTimer.js","App.js","index.js"],"names":["setTimer","props","id","title","toLowerCase","className","onClick","handleDecrease","count","handleIncrease","audio","document","getElementById","App","state","breakCount","sessionCount","clockCount","currentTimer","isPlaying","handlePlayPause","clearInterval","loop","setState","setInterval","play","handleReset","pause","convertToTime","minutes","Math","floor","seconds","handleLengthChange","timerType","newCount","undefined","this","breakProps","sessionProps","React","Component","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.144f6f19.chunk.js","sourcesContent":["import React from 'react'\r\nimport '@fortawesome/fontawesome-svg-core/styles.css' \r\nconst setTimer = (props) => {\r\n    const id = props.title.toLowerCase();\r\n  return (\r\n    <div className=\"timer-container\">\r\n      <h1 id={`${id}-label`}>{props.title} length</h1>\r\n      <div>\r\n          <button id={`${id}-decrement`} onClick={props.handleDecrease}>\r\n              <i className=\"fas fa-minus\" />\r\n          </button>\r\n          <span id={`${id}-length`} >{props.count}</span>\r\n          <button id={`${id}-increment`} onClick={props.handleIncrease}>\r\n              <i className=\"fas fa-plus\" />\r\n          </button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default setTimer\r\n","import React from 'react';\nimport './App.css';\nimport SetTimer from './components/setTimer'\nimport '@fortawesome/fontawesome-svg-core/styles.css'\n\nconst audio = document.getElementById('beep');\n\nclass App extends React.Component {\n\n  state = {\n    breakCount: 5,\n    sessionCount: 25,\n    clockCount: 25 * 60,\n    currentTimer: 'Session',\n    isPlaying: false,\n  }\n\n  constructor(props) {\n    super(props)\n    this.loop = undefined;\n  }\n\n  componentWillMount() {\n    clearInterval(this.loop);\n  }\n\n  handlePlayPause = () => {\n    const { isPlaying } = this.state\n    if (isPlaying) {\n      clearInterval(this.loop)\n      this.setState({\n        isPlaying: false\n      })\n    } else {\n      this.setState({\n        isPlaying: true\n      })\n\n      this.loop = setInterval(() => {\n        const { clockCount, currentTimer, breakCount, sessionCount } = this.state\n\n        if (clockCount === 0) {\n          this.setState({\n            currentTimer: (currentTimer === 'Session') ? 'Break' : 'Session',\n            clockCount: (currentTimer === 'Session') ? (breakCount * 60) : (sessionCount * 60)\n          })\n          audio.play();\n        } else {\n\n          this.setState({\n            clockCount: clockCount - 1\n          });\n        }\n      }, 1000);\n    }\n  }\n\n  handleReset = () => {\n    this.setState({\n      breakCount: 5,\n      sessionCount: 25,\n      clockCount: 25 * 60,\n      currentTimer: 'Session',\n      isPlaying: false,\n    });\n    clearInterval(this.loop)\n\n    audio.pause();\n    audio.currentTimer = 0;\n  }\n\n\n  convertToTime = (count) => {\n    let minutes = Math.floor(count / 60)\n    let seconds = count % 60;\n    minutes = minutes < 10 ? ('0' + minutes) : minutes;\n\n    seconds = seconds < 10 ? ('0' + seconds) : seconds;\n\n    return `${minutes}:${seconds}`;\n  }\n\n  handleLengthChange = (count, timerType) => {\n    const { sessionCount, breakCount, isPlaying, currentTimer } = this.state\n\n    let newCount;\n    if (timerType === 'session') {\n      newCount = sessionCount + count;\n    } else {\n      newCount = breakCount + count\n    }\n\n    if (newCount > 0 && newCount < 61 && !isPlaying) {\n      this.setState({\n        [`${timerType}Count`]: newCount,\n      });\n      if (currentTimer.toLowerCase() === timerType) {\n        this.setState({\n          clockCount: newCount * 60\n        })\n\n      }\n    }\n  }\n\n  render() {\n\n    const { breakCount, sessionCount, clockCount, currentTimer, isPlaying } = this.state;\n\n    const breakProps = {\n      title: 'Break',\n      count: breakCount,\n      handleDecrease: () => this.handleLengthChange(-1, 'break'),\n      handleIncrease: () => this.handleLengthChange(1, 'break')\n    }\n\n    const sessionProps = {\n      title: 'Session',\n      count: sessionCount,\n      handleDecrease: () => this.handleLengthChange(-1, 'session'),\n      handleIncrease: () => this.handleLengthChange(1, 'session')\n    }\n\n    return (\n      <div className=\"App\">\n        <div className=\"flex actions-wrapper\">\n          <SetTimer {...breakProps} />\n          <SetTimer {...sessionProps} />\n        </div>\n\n        <div className=\"clock-container\">\n          <h1 id=\"timer-label\">{currentTimer}</h1>\n          <span id=\"time-left\">{this.convertToTime(clockCount)}</span>\n\n\n\n          <div className=\"flex\">\n            <button id=\"start_stop\" onClick={this.handlePlayPause}>\n              <i className={`fas fa-${isPlaying ? 'pause' : 'play'}`} />\n            </button>\n            <button id=\"reset\" onClick={this.handleReset}>\n              <i className=\"fas fa-sync\" />\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}